#include <stdio.h>
#include <stdlib.h>  // For dynamic memory allocation

int main() {
    int rows, cols;

    // Taking input for number of rows and columns
    printf("Enter number of rows and columns: ");
    scanf("%d %d", &rows, &cols);

    // Dynamically allocate memory for the matrix
    int **mat = (int **)malloc(rows * sizeof(int *));
    int **rot = (int **)malloc(rows * sizeof(int *));
    for (int i = 0; i < rows; i++) {
        mat[i] = (int *)malloc(cols * sizeof(int));
        rot[i] = (int *)malloc(cols * sizeof(int));
    }

    // Taking input for matrix elements
    printf("Enter matrix elements:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            scanf("%d", &mat[i][j]);
        }
    }

    // Rotating the matrix 180 degrees
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            rot[rows - 1 - i][cols - 1 - j] = mat[i][j];  // Flip both row and column indices
        }
    }

    // Printing the original matrix
    printf("\nOriginal Matrix:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d ", mat[i][j]);
        }
        printf("\n");
    }

    // Printing the rotated matrix (180 degrees)
    printf("\nRotated Matrix (180 degrees):\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d ", rot[i][j]);
        }
        printf("\n");
    }

    // Free allocated memory
    for (int i = 0; i < rows; i++) {
        free(mat[i]);
        free(rot[i]);
    }
    free(mat);
    free(rot);

    return 0;
}
